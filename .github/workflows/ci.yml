name: CI - Build and Push to ECR

on:
  push:
    branches:
      - develop
      - main
  workflow_dispatch:

jobs:
  build:
    name: Build application
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: 'temurin'

      - name: Build application
        run: ./gradlew build

  trivy:
    name: Scan Trivy
    runs-on: ubuntu-latest
    needs: build

    permissions:
      security-events: write
      actions: read
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.24.0
        with:
          scan-type: "fs"
          format: sarif
          scanners: "vuln,secret,config"
          output: "trivy-java-results.sarif"
          severity: "CRITICAL,HIGH"

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          category: java-result
          sarif_file: "trivy-java-results.sarif"

  run-tests:
    name: Run unit and integration tests
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Java 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Run tests and calculate coverage for domain
        run: ./gradlew :domain:test jacocoTestCoverageVerification

#      - name: Run tests and calculate coverage for application
#        run: ./gradlew :application:test jacocoTestCoverageVerification

      - name: Run tests and calculate coverage for infrastructure
        run: ./gradlew :infrastructure:test jacocoTestCoverageVerification

  build-image:
    name: Build application image and push to ECR
    runs-on: ubuntu-latest
    needs:
      - trivy
      - run-tests
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: sa-east-1
      
      - name: Setup Java 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: 'temurin'
      
      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v3

      - name: Build application
        run: ./gradlew clean build -x test

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: Set project version
        run: echo "PROJECT_VERSION=$(./gradlew showVersion -q | tail -n 1)" >> $GITHUB_ENV

      - name: Set build version and branch name tag
        run: |
          echo BUILD_TAG=$(echo ${{ github.ref_name }} | "s,/,_,g")-${{ env.PROJECT_VERSION }}  >> $GITHUB_ENV

      - name: Print BUILD_TAG
        run: |
          echo "Branch    --> ${{ github.ref_name }}"
          echo "Version   --> ${{ env.PROJECT_VERSION }}"
          echo "BUILD_TAG --> ${{ env.BUILD_TAG }}"

      - name: Docker build image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: invoices
        run: |
          docker build . -t $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.BUILD_TAG }} -t $ECR_REGISTRY/$ECR_REPOSITORY:latest-${{ github.ref_name }}
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.BUILD_TAG }}
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest-${{ github.ref_name }}
